using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Cofim.Common;
using Cofim.Common.Model;
using Cofim.Common.Model.DataEntity;
using Cofim.Common.Model.Request;
using Cofim.Common.Model.Response;
using Cofim.Common.Services;
using Cofim.Web.Helpers;
using Cofim.Web.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Syncfusion.EJ2.Base;

namespace Cofim.Web.Controllers
{
    public class RendimientosController : Controller
    {
        private readonly ILogger<RendimientosController> _logger;
        private readonly DataContext  _dataContext;
        private readonly IMenuService _menuService;
        private readonly IUserHelper  _userHelper;

        public RendimientosController(DataContext dataContext, ILogger<RendimientosController> logger, IMenuService menuService, IUserHelper userHelper)
        {
            _dataContext = dataContext;
            _logger      = logger;
            _menuService = menuService;
            _userHelper  = userHelper;
        }

    public IActionResult Index()
        {
            if ( !User.Identity.IsAuthenticated )
               { return RedirectToAction("Login", "Account"); }

            ViewBag.MenuLeft  = _menuService.GenerateMenuWebAppLeftHeader (User.Identity.IsAuthenticated, _userHelper.GetRol((User.Identity as ClaimsIdentity)).FirstOrDefault(), "HomePrice");
            ViewBag.MenuRight = _menuService.GenerateMenuWebAppRightHeader(User.Identity.IsAuthenticated, User.Identity.Name);
            var listRendi = new List<RendimientoResp>
            {
                new RendimientoResp { Operadora = "test op", Fondo = "test Fondo", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op2", Fondo = "test Fondo2", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op3", Fondo = "test Fondo3", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op4", Fondo = "test Fondo4", Serie = "test ser", FondoSerie = "test FS" }
            };
            ViewBag.DataSource = Json(new { result = listRendi, count = listRendi.Count });

            var startdate = DateTime.Now.AddDays(MessageCenter.TREINTAYSEIS_MESES);
            FilterFondoInversion filterFI = new FilterFondoInversion
            {
                AdquirentesData     = new Items().AdquirentesLists(),
                AdquirentesSelected = "",
                FondosData          = _dataContext.FondosInversionMontosMinimos.Where(fi => fi.Operadora == "CI Fondos" || fi.Operadora == "BBVA Bancomer" || fi.Operadora == "SANTANDER").Where(fi => fi.Activo == MessageCenter.FONDO_ACTIVO).Select(fp => new Items { Id = fp.FondoSerie, Name = fp.FondoSerie, Category = fp.Operadora }).OrderBy(f=>f.Category).ToList(),
                FondosSelected      = "",
                StartDate           = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day),                
                EndDate             = new DateTime(startdate.Year, startdate.Month, startdate.Day),
            };
           
            return View(filterFI);

        }//index


        public IActionResult BuscarFI([FromBody]DataManagerRequest dm)
        {
            var listRendi = new List<RendimientoResp>
            {
                new RendimientoResp { Operadora = "test op", Fondo = "test Fondo", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op2", Fondo = "test Fondo2", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op3", Fondo = "test Fondo3", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op4", Fondo = "test Fondo4", Serie = "test ser", FondoSerie = "test FS" }
            };

            IEnumerable DataSource   = listRendi;
            DataOperations operation = new DataOperations();
            if (dm.Search != null && dm.Search.Count > 0)
               { DataSource = operation.PerformSearching(DataSource, dm.Search); }  //Search 
            if (dm.Sorted != null && dm.Sorted.Count > 0) //Sorting
               { DataSource = operation.PerformSorting(DataSource, dm.Sorted); }
            if (dm.Where != null && dm.Where.Count > 0) //Filtering
               { DataSource = operation.PerformFiltering(DataSource, dm.Where, dm.Where[0].Operator); }
            int count = DataSource.Cast<RendimientoResp>().Count();
            if (dm.Skip != 0)
               { DataSource = operation.PerformSkip(DataSource, dm.Skip); }        //Paging
            if (dm.Take != 0)
               { DataSource = operation.PerformTake(DataSource, dm.Take); }

            return dm.RequiresCounts ? Json(new { result = DataSource, count }) : Json(DataSource);

        }//BuscarFI



        [HttpPost]        
        public IActionResult BuscarFI([FromBody]FilterFondoInversion model)
        {           
            if (ModelState.IsValid)
            {
                Console.WriteLine($"POST BuscarFI ModelState.IsValid: {model}");
                model ??= new FilterFondoInversion();
                string   whereDateR     = $" AND VP.Fecha='{model?.StartDate.ToString("yyyy-MM-dd")}'";
                string[] fondosSelected = model?.FondosSelected == null ? new string[0] : model?.FondosSelected.Split(',');
                string   whereFondos    = "";
                foreach (var f in fondosSelected)
                {    if ( f == "" ) { break; }
                        { whereFondos += $",'{f}'"; }
                }
                whereFondos = (whereFondos == "" ? "" : $" AND FI.FondoSerie IN ({whereFondos.Remove(0, 1)})");

                string[] adquirentesSelected = model?.AdquirentesSelected == null ? new string[0] : model?.AdquirentesSelected.Split(',');
                string   whereAdq            = "";
                foreach (var ad in adquirentesSelected)
                {   whereAdq += ad switch { "PF"   => $" OR FI.PersonaFisica = 1",
                                            "PM"   => $" OR FI.PersonaMoral = 1",
                                            "PMNC" => $" OR FI.PersonaMoralNoContribuyente = 1",
                                            "SI"   => $" OR FI.SociedadesDeInversion = 1",
                                            _      => "",
                                          };                    
                }
                whereAdq = (whereAdq == "" ? "" : $" AND ( {whereAdq.Remove(0, 3)} )");

                string QueryRendimientos = $" SELECT * FROM FondosInversionMontosMinimos FI " +                                  
                                           $" WHERE FI.Activo ='{MessageCenter.FONDO_ACTIVO}' AND FI.MontoMinimo >= {model.MontoMinimo} {whereFondos} {whereAdq}";

                Console.WriteLine($"QUERY: {QueryRendimientos}");

                var fondos = _dataContext.FondosInversionMontosMinimos.FromSqlRaw(QueryRendimientos)
                                                                      .Include(fi=> fi.Precios).Where(p=> p.Fecha == model.StartDate)
                                                                      .ToList<FondosInversionMontosMinimos>();

                List<RendimientoResp> fondosRendimiento = fondos?.Select(fi => new RendimientoResp
                                                                        { Operadora = fi.Operadora,
                                                                          Fondo     = fi.Fondo,
                                                                          Serie     = fi.Serie,
                                                                          FondoSerie= fi.FondoSerie,
                                                                          RendiDirCuatroDias        = fi?.Precios?.FirstOrDefault()?.RendiDirCuatroDias / 100,
                                                                          RendiDirSieteDias         = fi?.Precios?.FirstOrDefault()?.RendiDirSieteDias / 100,
                                                                          RendiDirUnMes             = fi?.Precios?.FirstOrDefault()?.RendiDirUnMes / 100,
                                                                          RendiDirTresMeses         = fi?.Precios?.FirstOrDefault()?.RendiDirTresMeses / 100,
                                                                          RendiDirSeisMeses         = fi?.Precios?.FirstOrDefault()?.RendiDirSeisMeses / 100,
                                                                          RendiDirDoceMeses         = fi?.Precios?.FirstOrDefault()?.RendiDirDoceMeses / 100,
                                                                          RendiDirDiesiOchoMeses    = fi?.Precios?.FirstOrDefault()?.RendiDirDiesiOchoMeses / 100,
                                                                          RendiDirVeintiCuatroMeses = fi?.Precios?.FirstOrDefault()?.RendiDirVeintiCuatroMeses / 100,
                                                                          RendiDirTreintaySeisMeses = fi?.Precios?.FirstOrDefault()?.RendiDirTreintaySeisMeses / 100,
                                                                          RendiAnuCuatroDias        = fi?.Precios?.FirstOrDefault()?.RendiAnuCuatroDias /100,
                                                                          RendiAnuSieteDias         = fi?.Precios?.FirstOrDefault()?.RendiAnuSieteDias / 100,
                                                                          RendiAnuUnMes             = fi?.Precios?.FirstOrDefault()?.RendiAnuUnMes / 100,
                                                                          RendiAnuTresMeses         = fi?.Precios?.FirstOrDefault()?.RendiAnuTresMeses / 100,
                                                                          RendiAnuSeisMeses         = fi?.Precios?.FirstOrDefault()?.RendiAnuSeisMeses / 100,
                                                                          RendiAnuDoceMeses         = fi?.Precios?.FirstOrDefault()?.RendiAnuDoceMeses / 100,
                                                                          RendiAnuDiesiOchoMeses    = fi?.Precios?.FirstOrDefault()?.RendiAnuDiesiOchoMeses / 100,
                                                                          RendiAnuVeintiCuatroMeses = fi?.Precios?.FirstOrDefault()?.RendiAnuVeintiCuatroMeses / 100,
                                                                          RendiAnuTreintaySeisMeses = fi?.Precios?.FirstOrDefault()?.RendiAnuTreintaySeisMeses / 100,
                                                                        }).ToList();

                Console.WriteLine($"POST BuscarFI: {fondosRendimiento.Count}");
                /*
                IEnumerable   DataSource = fondosRendimiento;
                DataOperations operation = new DataOperations();
                if (dm.Search != null && dm.Search.Count > 0)
                   { DataSource = operation.PerformSearching(DataSource, dm.Search); }  //Search 
                if (dm.Sorted != null && dm.Sorted.Count > 0) //Sorting
                   { DataSource = operation.PerformSorting(DataSource, dm.Sorted); }
                if (dm.Where != null && dm.Where.Count > 0) //Filtering
                   { DataSource = operation.PerformFiltering(DataSource, dm.Where, dm.Where[0].Operator); }
                int count = DataSource.Cast<RendimientoResp>().Count();
                if (dm.Skip != 0)
                   { DataSource = operation.PerformSkip(DataSource, dm.Skip); }        //Paging
                if (dm.Take != 0)
                   { DataSource = operation.PerformTake(DataSource, dm.Take); }

                return dm.RequiresCounts ? Json(new { result = DataSource, count }) : Json(DataSource);
                return Json(fondosRendimiento);
                */
                return Json(new { result = fondosRendimiento, count = fondosRendimiento.Count });
            }

            Console.WriteLine($"POST BuscarFI ModelState.AddModelError: {model}");
            ModelState.AddModelError(string.Empty, MessageCenter.webApplabelLoginFail);
            var listRendi = new List<RendimientoResp>
            {
                new RendimientoResp { Operadora = "test op" , Fondo = "test Fondo" , Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op2", Fondo = "test Fondo2", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op3", Fondo = "test Fondo3", Serie = "test ser", FondoSerie = "test FS" },
                new RendimientoResp { Operadora = "test op4", Fondo = "test Fondo4", Serie = "test ser", FondoSerie = "test FS" }
            };
            return Json(listRendi);
        }

    }//class
}//namespace